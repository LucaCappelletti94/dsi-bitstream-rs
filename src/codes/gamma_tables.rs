// THIS FILE HAS BEEN GENERATED WITH THE SCRIPT gen_code_tables.py
// ~~~~~~~~~~~~~~~~~~~ DO NOT MODIFY ~~~~~~~~~~~~~~~~~~~~~~
// Pre-computed constants used to speedup the reading and writing of gamma codes
use crate::traits::{BitRead, BitWrite, UpcastableInto, BE, LE};
use anyhow::Result;
/// How many bits are needed to read the tables in this
pub const READ_BITS: usize = 9;
/// The len we assign to a code that cannot be decoded through the table
pub const MISSING_VALUE_LEN: u8 = 255;
/// Maximum value writable using the table(s)
pub const WRITE_MAX: u64 = 63;

#[inline(always)]
/// Autogenerated function to lookup a read table, if the result is `Some` the
/// value was found, otherwise we were not able to decode the value and you
/// should fallback to the default implementation
///
/// # Errors
/// This function errors if it wasn't able to skip_bits
pub fn read_table_le<B: BitRead<LE>>(backend: &mut B) -> Result<Option<(u64, usize)>> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.upcast();
        let (value, len) = READ_LE[idx as usize];
        if len != MISSING_VALUE_LEN {
            backend.skip_bits_after_table_lookup(len as usize)?;
            return Ok(Some((value as u64, len as usize)));
        }
    }
    Ok(None)
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)] // rationale: "*bits as u64" is flaky redundant
/// Autogenerated function to lookup a write table, if the result is `Some` the
/// value was found, otherwise we were not able to decode the value and you
/// should fallback to the default implementation
///
/// # Errors
/// This function errors if it wasn't able to skip_bits
pub fn write_table_le<B: BitWrite<LE>>(backend: &mut B, value: u64) -> Result<Option<usize>> {
    Ok(if let Some((bits, len)) = WRITE_LE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)
    } else {
        None
    })
}

#[inline(always)]
/// Autogenerated function to lookup a read table, if the result is `Some` the
/// value was found, otherwise we were not able to decode the value and you
/// should fallback to the default implementation
///
/// # Errors
/// This function errors if it wasn't able to skip_bits
pub fn read_table_be<B: BitRead<BE>>(backend: &mut B) -> Result<Option<(u64, usize)>> {
    if let Ok(idx) = backend.peek_bits(READ_BITS) {
        let idx: u64 = idx.upcast();
        let (value, len) = READ_BE[idx as usize];
        if len != MISSING_VALUE_LEN {
            backend.skip_bits_after_table_lookup(len as usize)?;
            return Ok(Some((value as u64, len as usize)));
        }
    }
    Ok(None)
}

#[inline(always)]
#[allow(clippy::unnecessary_cast)] // rationale: "*bits as u64" is flaky redundant
/// Autogenerated function to lookup a write table, if the result is `Some` the
/// value was found, otherwise we were not able to decode the value and you
/// should fallback to the default implementation
///
/// # Errors
/// This function errors if it wasn't able to skip_bits
pub fn write_table_be<B: BitWrite<BE>>(backend: &mut B, value: u64) -> Result<Option<usize>> {
    Ok(if let Some((bits, len)) = WRITE_BE.get(value as usize) {
        backend.write_bits(*bits as u64, *len as usize)?;
        Some(*len as usize)
    } else {
        None
    })
}
///Table used to speed up the reading of gamma codes
pub const READ_BE: &[(u16, u8)] = &[
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (0, 255),
    (15, 9),
    (16, 9),
    (17, 9),
    (18, 9),
    (19, 9),
    (20, 9),
    (21, 9),
    (22, 9),
    (23, 9),
    (24, 9),
    (25, 9),
    (26, 9),
    (27, 9),
    (28, 9),
    (29, 9),
    (30, 9),
    (7, 7),
    (7, 7),
    (7, 7),
    (7, 7),
    (8, 7),
    (8, 7),
    (8, 7),
    (8, 7),
    (9, 7),
    (9, 7),
    (9, 7),
    (9, 7),
    (10, 7),
    (10, 7),
    (10, 7),
    (10, 7),
    (11, 7),
    (11, 7),
    (11, 7),
    (11, 7),
    (12, 7),
    (12, 7),
    (12, 7),
    (12, 7),
    (13, 7),
    (13, 7),
    (13, 7),
    (13, 7),
    (14, 7),
    (14, 7),
    (14, 7),
    (14, 7),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (3, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (4, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (5, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (6, 5),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (1, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (2, 3),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
    (0, 1),
];
///Table used to speed up the reading of gamma codes
pub const READ_LE: &[(u16, u8)] = &[
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (7, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (15, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (8, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (9, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (16, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (10, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (11, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (17, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (12, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (13, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (18, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (14, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (7, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (19, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (8, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (9, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (20, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (10, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (11, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (21, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (12, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (13, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (22, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (14, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (7, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (23, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (8, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (9, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (24, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (10, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (11, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (25, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (12, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (13, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (26, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (14, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (7, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (27, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (8, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (9, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (28, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (10, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (11, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (29, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (12, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (0, 255),
    (0, 1),
    (1, 3),
    (0, 1),
    (3, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (13, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (4, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (30, 9),
    (0, 1),
    (1, 3),
    (0, 1),
    (5, 5),
    (0, 1),
    (2, 3),
    (0, 1),
    (14, 7),
    (0, 1),
    (1, 3),
    (0, 1),
    (6, 5),
    (0, 1),
    (2, 3),
    (0, 1),
];
///Table used to speed up the writing of gamma codes
pub const WRITE_BE: &[(u16, u8)] = &[
    (1, 1),
    (2, 3),
    (3, 3),
    (4, 5),
    (5, 5),
    (6, 5),
    (7, 5),
    (8, 7),
    (9, 7),
    (10, 7),
    (11, 7),
    (12, 7),
    (13, 7),
    (14, 7),
    (15, 7),
    (16, 9),
    (17, 9),
    (18, 9),
    (19, 9),
    (20, 9),
    (21, 9),
    (22, 9),
    (23, 9),
    (24, 9),
    (25, 9),
    (26, 9),
    (27, 9),
    (28, 9),
    (29, 9),
    (30, 9),
    (31, 9),
    (32, 11),
    (33, 11),
    (34, 11),
    (35, 11),
    (36, 11),
    (37, 11),
    (38, 11),
    (39, 11),
    (40, 11),
    (41, 11),
    (42, 11),
    (43, 11),
    (44, 11),
    (45, 11),
    (46, 11),
    (47, 11),
    (48, 11),
    (49, 11),
    (50, 11),
    (51, 11),
    (52, 11),
    (53, 11),
    (54, 11),
    (55, 11),
    (56, 11),
    (57, 11),
    (58, 11),
    (59, 11),
    (60, 11),
    (61, 11),
    (62, 11),
    (63, 11),
    (64, 13),
];
///Table used to speed up the writing of gamma codes
pub const WRITE_LE: &[(u16, u8)] = &[
    (1, 1),
    (2, 3),
    (6, 3),
    (4, 5),
    (12, 5),
    (20, 5),
    (28, 5),
    (8, 7),
    (24, 7),
    (40, 7),
    (56, 7),
    (72, 7),
    (88, 7),
    (104, 7),
    (120, 7),
    (16, 9),
    (48, 9),
    (80, 9),
    (112, 9),
    (144, 9),
    (176, 9),
    (208, 9),
    (240, 9),
    (272, 9),
    (304, 9),
    (336, 9),
    (368, 9),
    (400, 9),
    (432, 9),
    (464, 9),
    (496, 9),
    (32, 11),
    (96, 11),
    (160, 11),
    (224, 11),
    (288, 11),
    (352, 11),
    (416, 11),
    (480, 11),
    (544, 11),
    (608, 11),
    (672, 11),
    (736, 11),
    (800, 11),
    (864, 11),
    (928, 11),
    (992, 11),
    (1056, 11),
    (1120, 11),
    (1184, 11),
    (1248, 11),
    (1312, 11),
    (1376, 11),
    (1440, 11),
    (1504, 11),
    (1568, 11),
    (1632, 11),
    (1696, 11),
    (1760, 11),
    (1824, 11),
    (1888, 11),
    (1952, 11),
    (2016, 11),
    (64, 13),
];
///Table used to speed up the skipping of gamma codes
pub const LEN: &[u8] = &[
    1, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
    11, 11, 11, 11, 11, 11, 11, 11, 13,
];
