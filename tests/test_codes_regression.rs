use anyhow::Result;
use dsi_bitstream::prelude::*;

macro_rules! test_code {
    ($call_be:expr, $expected_be:expr, $call_le:expr, $expected_le:expr,) => {
        let mut data = vec![0_u64];
        let mut writer = <BufferedBitStreamWrite<BE, _>>::new(MemWordWriteVec::new(&mut data));
        $call_be(&mut writer)?;
        drop(writer);
        assert_eq!(
            data[0].to_be(),
            $expected_be as u64,
            "\ngot: {:064b}\nexp: {:064b}\n",
            data[0].to_be(),
            $expected_be as u64,
        );

        let mut data = vec![0_u64];
        let mut writer = <BufferedBitStreamWrite<LE, _>>::new(MemWordWriteVec::new(&mut data));
        $call_le(&mut writer)?;
        drop(writer);
        assert_eq!(
            data[0], $expected_le as u64,
            "\ngot: {:064b}\nexp: {:064b}\n",
            data[0], $expected_le as u64,
        );
    };
}

type Backend<'a, E> = BufferedBitStreamWrite<E, MemWordWriteVec<u64, &'a mut Vec<u64>>>;

#[test]
fn test_unary() -> Result<()> {
    for i in 0..64 {
        test_code!(
            |b: &mut Backend<BE>| b.write_unary(i),
            (1 << 63 - i),
            |b: &mut Backend<LE>| b.write_unary(i),
            (1 << i),
        );
    }

    Ok(())
}

#[test]
fn test_gamma() -> Result<()> {
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(0),
        0b1_000000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(0),
        0b000000000000000000000000000000000000000000000000000000000000000_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(1),
        0b01_00000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(1),
        0b00000000000000000000000000000000000000000000000000000000000000_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(2),
        0b011_0000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(2),
        0b0000000000000000000000000000000000000000000000000000000000000_110,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(3),
        0b00100_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(3),
        0b00000000000000000000000000000000000000000000000000000000000_00100,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(4),
        0b00101_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(4),
        0b00000000000000000000000000000000000000000000000000000000000_01100,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(5),
        0b00110_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(5),
        0b00000000000000000000000000000000000000000000000000000000000_10100,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(6),
        0b00111_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(6),
        0b00000000000000000000000000000000000000000000000000000000000_11100,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(7),
        0b0001000_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(7),
        0b000000000000000000000000000000000000000000000000000000000_0001000,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(8),
        0b0001001_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(8),
        0b000000000000000000000000000000000000000000000000000000000_0011000,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(9),
        0b0001010_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(9),
        0b000000000000000000000000000000000000000000000000000000000_0101000,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_gamma(10),
        0b0001011_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_gamma(10),
        0b000000000000000000000000000000000000000000000000000000000_0111000,
    );

    Ok(())
}

#[test]
fn test_delta() -> Result<()> {
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(0),
        0b1_000000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(0),
        0b000000000000000000000000000000000000000000000000000000000000000_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(1),
        0b0100_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(1),
        0b000000000000000000000000000000000000000000000000000000000000_0_010,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(2),
        0b010_1_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(2),
        0b000000000000000000000000000000000000000000000000000000000000_1_010,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(3),
        0b011_00_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(3),
        0b00000000000000000000000000000000000000000000000000000000000_00_110,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(4),
        0b011_01_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(4),
        0b00000000000000000000000000000000000000000000000000000000000_01_110,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(5),
        0b011_10_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(5),
        0b00000000000000000000000000000000000000000000000000000000000_10_110,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(6),
        0b011_11_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(6),
        0b00000000000000000000000000000000000000000000000000000000000_11_110,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(7),
        0b00100_000_00000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(7),
        0b00000000000000000000000000000000000000000000000000000000_000_00100,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(8),
        0b00100_001_00000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(8),
        0b00000000000000000000000000000000000000000000000000000000_001_00100,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(9),
        0b00100_010_00000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(9),
        0b00000000000000000000000000000000000000000000000000000000_010_00100,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_delta(10),
        0b00100_011_00000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_delta(10),
        0b00000000000000000000000000000000000000000000000000000000_011_00100,
    );

    Ok(())
}

#[test]
fn test_zeta3() -> Result<()> {
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(0),
        0b1_00_0000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(0),
        0b0000000000000000000000000000000000000000000000000000000000000_00_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(1),
        0b1_010_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(1),
        0b000000000000000000000000000000000000000000000000000000000000_001_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(2),
        0b1_011_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(2),
        0b000000000000000000000000000000000000000000000000000000000000_101_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(3),
        0b1_100_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(3),
        0b000000000000000000000000000000000000000000000000000000000000_010_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(4),
        0b1_101_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(4),
        0b000000000000000000000000000000000000000000000000000000000000_110_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(5),
        0b1_110_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(5),
        0b000000000000000000000000000000000000000000000000000000000000_011_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(6),
        0b1_111_000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(6),
        0b000000000000000000000000000000000000000000000000000000000000_111_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(7),
        0b01_00000_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(7),
        0b000000000000000000000000000000000000000000000000000000000_00000_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(8),
        0b01_00001_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(8),
        0b000000000000000000000000000000000000000000000000000000000_00001_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(9),
        0b01_00010_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(9),
        0b000000000000000000000000000000000000000000000000000000000_00010_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta3(10),
        0b01_00011_000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta3(10),
        0b000000000000000000000000000000000000000000000000000000000_00011_10,
    );

    Ok(())
}

#[test]
fn test_zeta2() -> Result<()> {
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(0, 2),
        0b1_0_00000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(0, 2),
        0b00000000000000000000000000000000000000000000000000000000000000_0_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(1, 2),
        0b1_10_0000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(1, 2),
        0b0000000000000000000000000000000000000000000000000000000000000_01_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(2, 2),
        0b1_11_0000000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(2, 2),
        0b0000000000000000000000000000000000000000000000000000000000000_11_1,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(3, 2),
        0b01_000_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(3, 2),
        0b00000000000000000000000000000000000000000000000000000000000_000_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(4, 2),
        0b01_001_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(4, 2),
        0b00000000000000000000000000000000000000000000000000000000000_001_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(5, 2),
        0b01_010_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(5, 2),
        0b00000000000000000000000000000000000000000000000000000000000_010_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(6, 2),
        0b01_011_00000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(6, 2),
        0b00000000000000000000000000000000000000000000000000000000000_011_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(7, 2),
        0b01_1000_0000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(7, 2),
        0b0000000000000000000000000000000000000000000000000000000000_0100_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(8, 2),
        0b01_1001_0000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(8, 2),
        0b0000000000000000000000000000000000000000000000000000000000_1100_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(9, 2),
        0b01_1010_0000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(9, 2),
        0b0000000000000000000000000000000000000000000000000000000000_0101_10,
    );
    test_code!(
        |b: &mut Backend<BE>| b.write_zeta(10, 2),
        0b01_1011_0000000000000000000000000000000000000000000000000000000000,
        |b: &mut Backend<LE>| b.write_zeta(10, 2),
        0b0000000000000000000000000000000000000000000000000000000000_1101_10,
    );

    Ok(())
}
